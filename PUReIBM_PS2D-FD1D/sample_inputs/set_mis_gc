     #!/bin/sh -w
  DIR=$1
  CPDIR=$1
  ngrids=6
  grid=("16" "32" "64" "96" "128" "180")
  nre=2
  re=("0.01" "20" "10" "20" "50" "100" "250" "300" "350" "400" "2.7" "2.9" "3.1" "3.3")

  cont=1

  max_queue_count=4
  queue_count=0
  queue_base=$2
  while [ $cont -eq 1 ]; do
    echo -e "Set up run for MIS:"

    read MIS
    RUN_NAME=MIS$MIS
    echo -e "RUN_NAME  = $RUN_NAME, MIS = $MIS"
    
    cd $DIR

  echo -n "Do you want to restart for MIS=$MIS. (y/n) [no] "
  read restart

 case $restart in
   y|Y )
     ires=1
     echo -n
     echo -e "Will be restarting the runs\n"
     echo -n
 ;;
   *)
     echo -e "Setting up new runs\n"
     ires=0
 ;;
 esac

    igrid=0

    while [ ${igrid} -lt ${ngrids} ]; do
    cwdir=MY_${grid[$igrid]}

    if [ $ires -eq 0 ]; then
    
	if  test -d $cwdir ; then
	    echo -e "directory $cwdir exists; not remaking it"
	else
	echo -e "directory $cwdir does not exist; making a new one"
	mkdir $cwdir
	fi	
    fi
    cd $cwdir

    ire=0
    while [ ${ire} -lt ${nre} ]; do
    cwdir=RE_${re[$ire]}
    if [ $ires -eq 0 ]; then
	if  test -d $cwdir ; then
	    echo -e "directory $cwdir exists; not remaking it"
	else
	echo -e "directory $cwdir does not exist; making a new one"
	mkdir $cwdir
	fi	
    fi

    cd $cwdir    
    function gen_seed() {
    cd ${HOME}/GEN_SEED
    ./seedgen.x >RUN
    #echo -n "working dir=$1"
    #echo -n 
    cp seed.d $1 
    cd $1
    return
    }

    if [ $ires -eq 0 ]; then
	cp $CPDIR/floparam.in .
	#cp $CPDIR/sphr_center.inp .
	#cp $CPDIR/rst.scr .
	sed -e "s|MY = 32|MY = ${grid[$igrid]}|g" <floparam.in> tmp1
	sed -e "s|RE = 10.0|RE = ${re[$ire]}|g" <tmp1> tmp2

	mv tmp2 floparam.in
	cp floparam.in ${RUN_NAME}_floparam.in
	cp $CPDIR/ibm.exe .
	gen_seed  `pwd`
	cp seed.d ${RUN_NAME}_seed.d
	mv seed.d ${RUN_NAME}_seed.d_init
        RUN=${RUN_NAME}_RUNINIT
	queue_add=1
    else
    	    
	if  test -f ${RUN_NAME}_CONVERGED ; then
	    echo -e "`pwd` is Converged \n"
	    queue_add=0
	else
	    echo -e "`pwd` is not Converged.\n"
	    cp $CPDIR/floparam.in .
#	    cp $CPDIR/rst.scr .
	sed -e "s|MY = 32|MY = ${grid[$igrid]}|g" <floparam.in> tmp1
	sed -e "s|RE = 10.0|RE = ${re[$ire]}|g" <tmp1> tmp2
	    sed -e "s|IRESTART = 0|IRESTART = 1|g" <tmp2> tmp3
            	    
       	    mv tmp3 floparam.in
	    cp floparam.in ${RUN_NAME}_floparam.in

	    cp $CPDIR/ibm.exe .
#	    sh rst.scr
	    rescount=0
	    rescount=`ls -l ${RUN_NAME}_RUNRES*|wc -l`
#	    "$n1 - $n2 = $(( $n1 - $n2 ))"
	    res="$(( $rescount + 1))"
	    
	    echo -e "rescount=$res"
	    RUN=${RUN_NAME}_RUNRES$res
	    queue_add=1
	fi
    fi
    

    if [ $queue_add -eq 1 ]; then
	case $queue_count in
	    0)
		echo -e "queue count = $queue_count \n"
		que_file1=M${MIS}R${re[$ire]}MY${grid[$igrid]}
		que_file1_dir=`pwd`
		cp $CPDIR/IBM ./$que_file1
		echo "cd `pwd`" >> $que_file1
		echo "time ./ibm.exe $RUN_NAME > $RUN &" >> $que_file1
		que_file_use=$que_file1_dir/$que_file1
		;;
	    *)
		echo 
		echo -e "queue count = $queue_count \n"
		que_filenew="$que_file1"_M${MIS}R${re[$ire]}MY${grid[$igrid]}
		mv $que_file1_dir/$que_file1 $que_file1_dir/$que_filenew
		echo "cd `pwd`" >> $que_file1_dir/$que_filenew
		echo "time ./ibm.exe $RUN_NAME  > $RUN &" >> $que_file1_dir/$que_filenew
		que_file1=$que_filenew
		que_file_use=$que_file1_dir/$que_filenew
	esac

	let queue_count=$queue_count+1 

    fi

    if [ "$queue_count" -eq $max_queue_count ]; then
     queue_count=0
     echo -n 
     echo -e "$que_file_use \n"
     echo -n
     echo "wait" >> $que_file_use
     echo -e "sending for qsub \n"
     que_filenew=${queue_base}_${que_file1}
     mv $que_file1_dir/$que_file1 $que_file1_dir/$que_filenew
     que_file_use=$que_file1_dir/$que_filenew
     echo -n
     qsub $que_file_use
    fi
    cd ..
    let ire=$ire+1
    done
    let igrid=$igrid+1 
    cd ..
  done 
  setuprund=n      
  echo -n
  echo -e "Do you want to set up run for another Volume Fraction (y/n) [no]"
  echo -n

  read setuprund

 case $setuprund in
   y|Y )
     cont=1

 ;;
   *)
    echo -n
    echo -e " Exiting the set up \n"
    echo -n
    cont=0 
 ;;
 esac

 done

# Send the remaining cases to queue
    echo -n
    echo -e "Sending the remaining jobs to queue $queue_count \n"
    echo -n

    if [ "$queue_count" -gt 0 ]; then
	
	if [ "$queue_count" -lt $max_queue_count ]; then
	    echo -n
	    echo -e "$que_file_use \n"
	    echo -n
	    echo "wait" >> $que_file_use
	    echo -e "sending for qsub \n"
	    echo -n
     que_filenew=${queue_base}_${que_file1}
     mv $que_file1_dir/$que_file1 $que_file1_dir/$que_filenew
     que_file_use=$que_file1_dir/$que_filenew
       	    qsub $que_file_use
	
	fi
    fi
 exit
